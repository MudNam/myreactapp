name: Deploy React App to GCP Load Balancer

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for deployment'
        required: true
        default: 'Manual deployment'
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  LOAD_BALANCER_IP: ${{ secrets.LOAD_BALANCER_IP }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GCP_PROJECT }}
        service_account_key: ${{ env.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Get Instance List
      id: get_instances
      run: |
        # Get all instances behind load balancer
        INSTANCE_LIST=$(gcloud compute instances list --filter="labels.app=react-app" --format="get(name,zone)")
        echo "Found instances: $INSTANCE_LIST"
        echo "instance_list=$INSTANCE_LIST" >> $GITHUB_ENV

    - name: Deploy to Instances
      run: |
        # Function to deploy to a single instance
        deploy_to_instance() {
          local instance_name=$1
          local zone=$2
          
          echo "Deploying to instance: $instance_name in zone: $zone"
          
          # Deploy using service account
          gcloud compute ssh $instance_name --zone=$zone --command='
            set -e
            
            # Navigate to project directory
            mkdir -p /var/www/react-app
            cd /var/www/react-app
            
            # Clone or pull latest changes
            if [ ! -d ".git" ]; then
                git clone https://github.com/${{ github.repository }} .
            else
                git pull origin main
            fi
            
            # Install dependencies and build
            npm install
            npm run build
            
            # Start new app on different port
            pm2 start npx --name "react-app-new" -- serve -s build -l 5001
            
            # Add health check endpoint if not exists
            if [ ! -f "health.js" ]; then
              cat > health.js << "HEALTHEOF"
              const express = require("express");
              const app = express();
              app.get("/health", (req, res) => res.status(200).send("OK"));
              app.listen(8080);
              HEALTHEOF
              
              npm install express
              pm2 start health.js --name "health-check"
            fi
            
            # Wait for new app to be ready
            echo "Waiting for new app to be ready..."
            for i in {1..30}; do
              if curl -s http://localhost:5001 > /dev/null; then
                echo "New app is ready!"
                
                # Stop old app
                if pm2 list | grep -q "react-app"; then
                  pm2 delete react-app
                fi
                
                # Rename new app
                pm2 delete react-app-new
                pm2 start npx --name "react-app" -- serve -s build -l 5000
                
                exit 0
              fi
              sleep 2
            done
            
            # If we get here, new app failed to start
            pm2 delete react-app-new
            echo "Failed to start new app"
            exit 1
          '
          
          # Verify instance health
          echo "Verifying instance health..."
          for i in {1..5}; do
            if curl -s "http://$instance_name:8080/health"; then
              echo "Instance $instance_name is healthy"
              return 0
            fi
            sleep 5
          done
          
          echo "Instance $instance_name failed health check"
          return 1
        }
        
        # Deploy to each instance
        echo "$instance_list" | while read -r instance zone; do
          if [ ! -z "$instance" ]; then
            echo "Starting deployment to $instance"
            
            # Deploy and verify
            if deploy_to_instance "$instance" "$zone"; then
              echo "Successfully deployed to $instance"
            else
              echo "Failed to deploy to $instance"
              exit 1
            fi
            
            # Wait before next instance
            echo "Waiting 30 seconds before next instance..."
            sleep 30
          fi
        done

    - name: Verify Load Balancer Health
      run: |
        echo "Verifying load balancer health..."
        for i in {1..5}; do
          if curl -s "http://${{ env.LOAD_BALANCER_IP }}/health"; then
            echo "Load balancer is healthy"
            exit 0
          fi
          echo "Attempt $i: Load balancer not ready, waiting..."
          sleep 10
        done
        echo "Load balancer health check failed"
        exit 1

    - name: Log Deployment Info
      run: |
        echo "Deployment Information:"
        echo "Reason: ${{ github.event.inputs.reason }}"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Deployed by: ${{ github.actor }}"
        echo "Timestamp: $(date)"