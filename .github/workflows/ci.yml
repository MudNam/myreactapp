name: React.js GCP Deployment

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Create Instance Template
        id: template
        run: |
          # Generate template name
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          TEMPLATE_NAME="react-app-template-${TIMESTAMP}"
          
          # Create startup script using heredoc
          cat > startup-script.sh << 'STARTUP_SCRIPT'
          #!/bin/bash
          
          # System setup
          apt-get update
          apt-get install -y git nodejs npm
          
          # GitHub setup
          mkdir -p /root/.ssh
          echo "$SSH_PRIVATE_KEY" > /root/.ssh/id_ed25519
          chmod 600 /root/.ssh/id_ed25519
          ssh-keyscan github.com >> /root/.ssh/known_hosts
          
          # Application setup
          mkdir -p /app
          cd /app
          git clone $REPO_URL .
          git checkout $BRANCH
          
          # Install dependencies and build
          npm install
          npm run build
          
          # Install PM2 globally
          npm install -g pm2
          
          # Start application
          pm2 start npm --name "react-app" -- start
          pm2 save
          STARTUP_SCRIPT
          
          # Make script executable
          chmod +x startup-script.sh
          
          # Create metadata file
          cat > metadata.txt << EOF
          REPO_URL=${{ github.repositoryUrl }}
          BRANCH=${{ github.event.inputs.branch }}
          SSH_PRIVATE_KEY=${{ secrets.SSH_PRIVATE_KEY }}
          EOF
          
          # Create instance template
          gcloud compute instance-templates create $TEMPLATE_NAME \
            --machine-type=e2-medium \
            --image-family=ubuntu-2004-lts \
            --image-project=ubuntu-os-cloud \
            --tags=http-server,https-server \
            --metadata-from-file=startup-script=startup-script.sh \
            --metadata-from-file=metadata=metadata.txt
          
          echo "template_name=$TEMPLATE_NAME" >> $GITHUB_OUTPUT

      - name: Update Instance Group
        run: |
          # Update instance group with new template
          gcloud compute instance-groups managed set-instance-template ${{ secrets.GCP_INSTANCE_GROUP }} \
            --template=${{ steps.template.outputs.template_name }} \
            --zone=${{ secrets.GCP_ZONE }}

      - name: Start Rolling Update
        run: |
          # Start rolling update
          gcloud compute instance-groups managed rolling-action start-update ${{ secrets.GCP_INSTANCE_GROUP }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --version=template=${{ steps.template.outputs.template_name }} \
            --max-unavailable=1 \
            --max-surge=1

      - name: Wait for Update Completion
        run: |
          # Wait for update to complete
          TIMEOUT=600
          INTERVAL=30
          ELAPSED=0
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            # Get detailed instance information
            echo "Checking instance status..."
            INSTANCE_INFO=$(gcloud compute instance-groups managed list-instances ${{ secrets.GCP_INSTANCE_GROUP }} \
              --zone=${{ secrets.GCP_ZONE }} \
              --format="table(name,status,version.template,currentAction)")
            
            # Check for errors in the output
            if echo "$INSTANCE_INFO" | grep -q "ERROR"; then
              echo "‚ùå Error in instance status check:"
              echo "$INSTANCE_INFO"
              exit 1
            fi
            
            # Count non-RUNNING instances
            NON_RUNNING_COUNT=$(echo "$INSTANCE_INFO" | grep -v "RUNNING" | grep -v "NAME" | wc -l)
            
            if [ "$NON_RUNNING_COUNT" -gt 0 ]; then
              echo "‚è≥ $NON_RUNNING_COUNT instances still updating... ($ELAPSED/$TIMEOUT seconds)"
              echo "Current status:"
              echo "$INSTANCE_INFO"
              
              # Check for specific issues
              if echo "$INSTANCE_INFO" | grep -q "VERIFYING"; then
                echo "‚ö†Ô∏è Some instances are in VERIFYING state"
              fi
              if echo "$INSTANCE_INFO" | grep -q "STAGING"; then
                echo "‚ö†Ô∏è Some instances are in STAGING state"
              fi
              if echo "$INSTANCE_INFO" | grep -q "ERROR"; then
                echo "‚ùå Some instances have errors"
                exit 1
              fi
            else
              echo "‚úÖ All instances are running and updated"
              echo "Final status:"
              echo "$INSTANCE_INFO"
              exit 0
            fi
            
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done
          
          echo "‚ùå Timeout waiting for update to complete"
          echo "Final status:"
          gcloud compute instance-groups managed list-instances ${{ secrets.GCP_INSTANCE_GROUP }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --format="table(name,status,version.template,currentAction)"
          
          # Get instance group status
          echo "Instance group status:"
          gcloud compute instance-groups managed describe ${{ secrets.GCP_INSTANCE_GROUP }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --format="table(status)"
          
          exit 1

      - name: Cleanup Old Templates
        run: |
          # Keep only the 5 most recent templates
          TEMPLATES_TO_DELETE=$(gcloud compute instance-templates list \
            --filter="name~'react-app-template-*'" \
            --sort-by="~creationTimestamp" \
            --format="value(name)" | tail -n +6)
          
          if [ -n "$TEMPLATES_TO_DELETE" ]; then
            echo "üóëÔ∏è Deleting old templates:"
            echo "$TEMPLATES_TO_DELETE"
            echo "$TEMPLATES_TO_DELETE" | xargs -I {} gcloud compute instance-templates delete {} --quiet
          else
            echo "‚ú® No old templates to delete"
          fi