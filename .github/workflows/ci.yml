name: Deploy React App to GCP

# Testing with new private key
on:
  push:
    branches:
      - main  # Runs on push to 'main' branch
  workflow_dispatch:  # Adds manual triggerr button
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual trigger'
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Set Up SSH Key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          # Ensure proper line endings and remove any extra spaces
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | sed 's/^[ \t]*//;s/[ \t]*$//' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          chmod 700 ~/.ssh
          
          # Verify key format (supporting both RSA and OpenSSH formats)
          echo "Checking SSH key format..."
          if ! grep -q "BEGIN" ~/.ssh/id_rsa; then
            echo "Error: SSH key does not start with BEGIN"
            exit 1
          fi
          if ! grep -q "END" ~/.ssh/id_rsa; then
            echo "Error: SSH key does not end with END"
            exit 1
          fi
          
          # Debug: Show key file info
          echo "Key file info:"
          ls -la ~/.ssh/id_rsa
          echo "First line of key:"
          head -n 1 ~/.ssh/id_rsa
          echo "Last line of key:"
          tail -n 1 ~/.ssh/id_rsa
        
      - name: Add SSH Host to Known Hosts
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          echo "Known hosts content:"
          cat ~/.ssh/known_hosts
        
      - name: Test SSH Connection
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        run: |
          echo "Attempting to connect to $SSH_USERNAME@$SSH_HOST:$SSH_PORT"
          # Try SSH with verbose output
          ssh -v -i ~/.ssh/id_rsa -p $SSH_PORT $SSH_USERNAME@$SSH_HOST "echo 'SSH connection successful'"
        
      - name: Deploy to GCP VMs
        env:
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          VM_DEPLOY_KEY: ${{ secrets.VM_DEPLOY_KEY }}
          INSTANCE_IPS: ${{ secrets.INSTANCE_IPS }}
        run: |
          # Function to deploy to a single VM
          deploy_to_vm() {
            local vm_host=$1
            local vm_port=$2
            
            echo "Deploying to VM: $vm_host:$vm_port"
            
            ssh -i ~/.ssh/id_rsa -p $vm_port $SSH_USERNAME@$vm_host << 'EOF'
              set -e
              
              # Set up GitHub deploy key
              mkdir -p ~/.ssh
              echo "$VM_DEPLOY_KEY" | tr -d '\r' > ~/.ssh/id_ed25519
              chmod 600 ~/.ssh/id_ed25519
              ssh-keyscan -H github.com >> ~/.ssh/known_hosts
              chmod 600 ~/.ssh/known_hosts
              
              # Navigate to project directory
              mkdir -p ~/react-app
              cd ~/react-app
              
              # Clone or pull latest changes
              if [ ! -d ".git" ]; then
                GIT_SSH_COMMAND="ssh -i ~/.ssh/id_ed25519" git clone git@github.com:MudNam/myreactapp.git .
              else
                GIT_SSH_COMMAND="ssh -i ~/.ssh/id_ed25519" git pull origin main
              fi
              
              # Install dependencies and build
              npm ci
              npm run build
              
              # Manage process with PM2
              if pm2 list | grep -q "react-app"; then
                pm2 stop react-app
                pm2 delete react-app
              fi
              
              # Start the app
              pm2 start npx --name "react-app" -- serve -s build -l 5000
            EOF
          }
          
          # Split instance IPs and deploy to each
          IFS=',' read -ra INSTANCES <<< "$INSTANCE_IPS"
          for ip in "${INSTANCES[@]}"; do
            deploy_to_vm "$ip" "$SSH_PORT"
          done