name: Deployment with Autoscaling Support

# Testing with new private key
on:
  push:
    branches:
      - main  # Runs on push to 'main' branch
  workflow_dispatch:  # Adds manual trigger button
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual trigger'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Set Up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Get Current Instance Count
        id: get_count
        run: |
          CURRENT_COUNT=$(gcloud compute instances list --filter="labels.app=react-app" --format="value(name)" | wc -l)
          if [ "$CURRENT_COUNT" -eq 0 ]; then
            echo "Error: No instances found with label app=react-app"
            exit 1
          fi
          echo "Current instance count: $CURRENT_COUNT"
          echo "current_count=$CURRENT_COUNT" >> $GITHUB_OUTPUT

      - name: Temporarily Disable Autoscaling
        run: |
          echo "Temporarily disabling autoscaling for deployment..."
          gcloud compute instance-groups managed update ${{ secrets.INSTANCE_GROUP }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --min-num-replicas=${{ steps.get_count.outputs.current_count }} \
            --max-num-replicas=${{ steps.get_count.outputs.current_count }}

      - name: Scale Up (Blue Environment)
        run: |
          # Calculate new size (double the current count)
          NEW_SIZE=$(( ${{ steps.get_count.outputs.current_count }} * 2 ))
          echo "Scaling up to $NEW_SIZE instances for blue environment..."
          
          gcloud compute instance-groups managed resize ${{ secrets.INSTANCE_GROUP }} \
            --size=$NEW_SIZE \
            --zone=${{ secrets.GCP_ZONE }}
          
          # Wait for instances to be ready with retries
          for i in {1..5}; do
            sleep 30
            READY_COUNT=$(gcloud compute instances list --filter="labels.app=react-app AND status=RUNNING" --format="value(name)" | wc -l)
            if [ "$READY_COUNT" -eq "$NEW_SIZE" ]; then
              echo "All instances are ready"
              break
            fi
            if [ "$i" -eq 5 ]; then
              echo "Error: Timeout waiting for instances to be ready"
              exit 1
            fi
            echo "Waiting for instances to be ready (attempt $i/5)..."
          done

      - name: Deploy to Blue Environment
        run: |
          # Get all instances
          INSTANCES=$(gcloud compute instances list --filter="labels.app=react-app" --format="value(name)")
          
          for INSTANCE in $INSTANCES; do
            echo "Deploying to $INSTANCE"
            # Try deployment up to 3 times
            for attempt in {1..3}; do
              if gcloud compute ssh $INSTANCE --zone=${{ secrets.GCP_ZONE }} --command="
                set -e
                cd ~/react-app || mkdir -p ~/react-app && cd ~/react-app
                git pull origin main
                npm ci
                npm run build
                pm2 start npx --name 'react-app' -- serve -s build -l 5000
                sleep 5
                pm2 list | grep -q 'react-app' || exit 1
              "; then
                echo "Deployment successful on attempt $attempt"
                break
              fi
              if [ "$attempt" -eq 3 ]; then
                echo "Error: Failed to deploy after 3 attempts"
                exit 1
              fi
              echo "Retrying deployment (attempt $attempt/3)..."
              sleep 10
            done
          done

      - name: Verify Blue Environment
        run: |
          INSTANCES=$(gcloud compute instances list --filter="labels.app=react-app" --format="value(name)")
          for INSTANCE in $INSTANCES; do
            IP=$(gcloud compute instances describe $INSTANCE --zone=${{ secrets.GCP_ZONE }} --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
            # Try health check up to 3 times
            for attempt in {1..3}; do
              if curl -s "http://$IP:5000" > /dev/null; then
                echo "Health check passed for $INSTANCE"
                break
              fi
              if [ "$attempt" -eq 3 ]; then
                echo "Error: Health check failed for $INSTANCE after 3 attempts"
                exit 1
              fi
              echo "Retrying health check for $INSTANCE (attempt $attempt/3)..."
              sleep 10
            done
          done

      - name: Update Load Balancer
        run: |
          echo "Updating load balancer to point to new instances..."
          # Get all instance IPs
          INSTANCE_IPS=$(gcloud compute instances list --filter="labels.app=react-app" --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
          
          # Update load balancer backend service
          gcloud compute backend-services update ${{ secrets.LOAD_BALANCER_BACKEND }} \
            --region=${{ secrets.GCP_REGION }} \
            --add-backend="instance-group=${{ secrets.INSTANCE_GROUP }},zone=${{ secrets.GCP_ZONE }}"

      - name: Scale Down (Remove Green Environment)
        run: |
          # Scale back to original count
          ORIGINAL_COUNT=${{ steps.get_count.outputs.current_count }}
          echo "Scaling down to $ORIGINAL_COUNT instances..."
          
          gcloud compute instance-groups managed resize ${{ secrets.INSTANCE_GROUP }} \
            --size=$ORIGINAL_COUNT \
            --zone=${{ secrets.GCP_ZONE }}
          
          # Verify scaling with retries
          for i in {1..5}; do
            sleep 30
            COUNT=$(gcloud compute instances list --filter="labels.app=react-app" --format="value(name)" | wc -l)
            if [ "$COUNT" -eq "$ORIGINAL_COUNT" ]; then
              echo "Successfully scaled down to $ORIGINAL_COUNT instances"
              break
            fi
            if [ "$i" -eq 5 ]; then
              echo "Error: Failed to scale down to $ORIGINAL_COUNT instances"
              exit 1
            fi
            echo "Waiting for scaling to complete (attempt $i/5)..."
          done

      - name: Re-enable Autoscaling
        run: |
          echo "Re-enabling autoscaling..."
          gcloud compute instance-groups managed update ${{ secrets.INSTANCE_GROUP }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --min-num-replicas=${{ secrets.AUTOSCALING_MIN }} \
            --max-num-replicas=${{ secrets.AUTOSCALING_MAX }} \
            --target-cpu-utilization=${{ secrets.AUTOSCALING_TARGET_CPU }}