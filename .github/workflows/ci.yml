name: Deploy React App to GCP

# Testing with new private key
on:
  push:
    branches:
      - main  # Runs on push to 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Set Up SSH Key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          # Ensure proper line endings and remove any extra spaces
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | sed 's/^[ \t]*//;s/[ \t]*$//' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          chmod 700 ~/.ssh
          
          # Verify key format (supporting both RSA and OpenSSH formats)
          echo "Checking SSH key format..."
          if ! grep -q "BEGIN" ~/.ssh/id_rsa; then
            echo "Error: SSH key does not start with BEGIN"
            exit 1
          fi
          if ! grep -q "END" ~/.ssh/id_rsa; then
            echo "Error: SSH key does not end with END"
            exit 1
          fi
          
          # Debug: Show key file info
          echo "Key file info:"
          ls -la ~/.ssh/id_rsa
          echo "First line of key:"
          head -n 1 ~/.ssh/id_rsa
          echo "Last line of key:"
          tail -n 1 ~/.ssh/id_rsa
        
      - name: Add SSH Host to Known Hosts
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          echo "Known hosts content:"
          cat ~/.ssh/known_hosts
        
      - name: Test SSH Connection
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        run: |
          echo "Attempting to connect to $SSH_USERNAME@$SSH_HOST:$SSH_PORT"
          # Try SSH with verbose output
          ssh -v -i ~/.ssh/id_rsa -p $SSH_PORT $SSH_USERNAME@$SSH_HOST "echo 'SSH connection successful'"
        
      - name: Deploy to GCP VM
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        run: |
          ssh -i ~/.ssh/id_rsa -p $SSH_PORT $SSH_USERNAME@$SSH_HOST << 'EOF'
            set -e  # Exit immediately if a command exits with a non-zero status
            
            # Debug: Show current user and directory
            echo "Current user: $(whoami)"
            echo "Current directory: $(pwd)"
            
            # Navigate to the project directory or create it if it doesn't exist
            mkdir -p ~/react-app
            cd ~/react-app
            
            # Clone repo if not exists, else pull latest changes
            if [ ! -d ".git" ]; then
              git clone git@github.com:MudNam/myreactapp.git .
            else
              git pull origin main
            fi
            
            # Install dependencies
            npm ci  # More reliable than npm install for CI environments
            
            # Build the React app
            npm run build
            
            # Use PM2 to manage the process
            if pm2 list | grep -q "react-app"; then
              pm2 stop react-app
              pm2 delete react-app
            fi
            
            # Serve the app on port 5000
            pm2 start npx --name "react-app" -- serve -s build -l 5000
          EOF