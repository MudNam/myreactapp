name: Blue-Green Deployment to GCP

# Testing with new private key
on:
  push:
    branches:
      - main  # Runs on push to 'main' branch
  workflow_dispatch:  # Adds manual trigger button
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual trigger'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Set Up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Scale Up to 4 Instances (Blue Environment)
        run: |
          echo "Scaling up to 4 instances for blue environment..."
          gcloud compute instance-groups managed resize ${{ secrets.INSTANCE_GROUP }} --size=4 --zone=${{ secrets.GCP_ZONE }}
          echo "Waiting for instances to be ready..."
          sleep 60  # Wait for instances to be ready

      - name: Deploy to New Instances (Blue)
        run: |
          # Get list of all instances
          INSTANCES=$(gcloud compute instances list --filter="labels.app=react-app" --format="value(name)")
          echo "Found instances: $INSTANCES"
          
          # Deploy to each new instance
          for INSTANCE in $INSTANCES; do
            echo "Deploying to instance: $INSTANCE"
            
            # Get the instance IP
            INSTANCE_IP=$(gcloud compute instances describe $INSTANCE --zone=${{ secrets.GCP_ZONE }} --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
            
            # SSH into instance and deploy
            gcloud compute ssh $INSTANCE --zone=${{ secrets.GCP_ZONE }} --command="
              set -e
              
              # Navigate to the project directory
              mkdir -p ~/react-app
              cd ~/react-app
              
              # Clone or pull latest code
              if [ ! -d '.git' ]; then
                git clone git@github.com:MudNam/myreactapp.git .
              else
                git pull origin main
              fi
              
              # Install dependencies and build
              npm ci
              npm run build
              
              # Start the application with PM2
              pm2 start npx --name 'react-app' -- serve -s build -l 5000
              
              # Verify the application is running
              sleep 5
              if ! pm2 list | grep -q 'react-app'; then
                echo 'Error: Application failed to start'
                exit 1
              fi
            "
          done

      - name: Verify Blue Environment
        run: |
          # Get list of all instances
          INSTANCES=$(gcloud compute instances list --filter="labels.app=react-app" --format="value(name)")
          
          for INSTANCE in $INSTANCES; do
            INSTANCE_IP=$(gcloud compute instances describe $INSTANCE --zone=${{ secrets.GCP_ZONE }} --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
            
            # Check if application is responding
            if ! curl -s "http://$INSTANCE_IP:5000" > /dev/null; then
              echo "Error: Instance $INSTANCE is not responding"
              exit 1
            fi
          done

      - name: Update Load Balancer
        run: |
          # Update the load balancer to point to the new instances
          echo "Updating load balancer to point to new instances..."
          # Add your load balancer update commands here

      - name: Scale Down to 2 Instances (Remove Green Environment)
        run: |
          echo "Scaling down to 2 instances..."
          gcloud compute instance-groups managed resize ${{ secrets.INSTANCE_GROUP }} --size=2 --zone=${{ secrets.GCP_ZONE }}
          
          # Wait for scaling to complete
          echo "Waiting for scaling to complete..."
          sleep 60
          
          # Verify only 2 instances are running
          INSTANCE_COUNT=$(gcloud compute instances list --filter="labels.app=react-app" --format="value(name)" | wc -l)
          if [ "$INSTANCE_COUNT" -ne 2 ]; then
            echo "Error: Expected 2 instances, found $INSTANCE_COUNT"
            exit 1
          fi